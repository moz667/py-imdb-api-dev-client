# coding: utf-8

"""
    IMDbAPI

    This is beta version of the IMDb API. It is not yet stable and may change in the future.  # noqa: E501

    OpenAPI spec version: 2.0.2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from py_imdb_api_dev_client.api_client import ApiClient


class TitleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def i_mdb_api_service_batch_get_titles(self, title_ids, **kwargs):  # noqa: E501
        """Batch get titles by IDs  # noqa: E501

        Retrieve details of multiple titles using their IMDb IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_batch_get_titles(title_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] title_ids: List of IMDb title IDs. Maximum 10 IDs. (required)
        :return: ImdbapiBatchGetTitlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_batch_get_titles_with_http_info(title_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_batch_get_titles_with_http_info(title_ids, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_batch_get_titles_with_http_info(self, title_ids, **kwargs):  # noqa: E501
        """Batch get titles by IDs  # noqa: E501

        Retrieve details of multiple titles using their IMDb IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_batch_get_titles_with_http_info(title_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] title_ids: List of IMDb title IDs. Maximum 10 IDs. (required)
        :return: ImdbapiBatchGetTitlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_batch_get_titles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_ids' is set
        if self.api_client.client_side_validation and ('title_ids' not in params or
                                                       params['title_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title_ids` when calling `i_mdb_api_service_batch_get_titles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title_ids' in params:
            query_params.append(('title_ids', params['title_ids']))  # noqa: E501
            collection_formats['title_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/titles:batch_get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiBatchGetTitlesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def i_mdb_api_service_get_title(self, title_id, **kwargs):  # noqa: E501
        """Get title by ID  # noqa: E501

        Retrieve a title's details using its IMDb ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_get_title(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: The IMDb title ID in the format 'tt1234567'. (required)
        :return: ImdbapiTitle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_get_title_with_http_info(title_id, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_get_title_with_http_info(title_id, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_get_title_with_http_info(self, title_id, **kwargs):  # noqa: E501
        """Get title by ID  # noqa: E501

        Retrieve a title's details using its IMDb ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_get_title_with_http_info(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: The IMDb title ID in the format 'tt1234567'. (required)
        :return: ImdbapiTitle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_get_title" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_id' is set
        if self.api_client.client_side_validation and ('title_id' not in params or
                                                       params['title_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title_id` when calling `i_mdb_api_service_get_title`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'title_id' in params:
            path_params['title_id'] = params['title_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/titles/{title_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiTitle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def i_mdb_api_service_list_title_akas(self, title_id, **kwargs):  # noqa: E501
        """List AKAs for a title  # noqa: E501

        Retrieve the alternative titles (AKAs) associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_akas(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :return: ImdbapiListTitleAKAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_list_title_akas_with_http_info(title_id, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_list_title_akas_with_http_info(title_id, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_list_title_akas_with_http_info(self, title_id, **kwargs):  # noqa: E501
        """List AKAs for a title  # noqa: E501

        Retrieve the alternative titles (AKAs) associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_akas_with_http_info(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :return: ImdbapiListTitleAKAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_list_title_akas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_id' is set
        if self.api_client.client_side_validation and ('title_id' not in params or
                                                       params['title_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title_id` when calling `i_mdb_api_service_list_title_akas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'title_id' in params:
            path_params['title_id'] = params['title_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/titles/{title_id}/akas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiListTitleAKAsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def i_mdb_api_service_list_title_credits(self, title_id, **kwargs):  # noqa: E501
        """List credits for a title  # noqa: E501

        Retrieve the credits associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_credits(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :param list[str] categories: Optional. Filter for credit categories.   - CAST: The CAST category. This enum value is used to represent both ACTOR and ACTRESS roles.  - ACTOR: The ACTOR category  - ACTRESS: The ACTRESS category  - DIRECTOR: The DIRECTOR category  - WRITER: The WRITER category
        :param int page_size: Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 10.
        :param str page_token: Optional. Token for pagination, if applicable.
        :return: ImdbapiListTitleCreditsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_list_title_credits_with_http_info(title_id, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_list_title_credits_with_http_info(title_id, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_list_title_credits_with_http_info(self, title_id, **kwargs):  # noqa: E501
        """List credits for a title  # noqa: E501

        Retrieve the credits associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_credits_with_http_info(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :param list[str] categories: Optional. Filter for credit categories.   - CAST: The CAST category. This enum value is used to represent both ACTOR and ACTRESS roles.  - ACTOR: The ACTOR category  - ACTRESS: The ACTRESS category  - DIRECTOR: The DIRECTOR category  - WRITER: The WRITER category
        :param int page_size: Optional. The maximum number of credits to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 10.
        :param str page_token: Optional. Token for pagination, if applicable.
        :return: ImdbapiListTitleCreditsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_id', 'categories', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_list_title_credits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_id' is set
        if self.api_client.client_side_validation and ('title_id' not in params or
                                                       params['title_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title_id` when calling `i_mdb_api_service_list_title_credits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'title_id' in params:
            path_params['title_id'] = params['title_id']  # noqa: E501

        query_params = []
        if 'categories' in params:
            query_params.append(('categories', params['categories']))  # noqa: E501
            collection_formats['categories'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/titles/{title_id}/credits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiListTitleCreditsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def i_mdb_api_service_list_title_release_dates(self, title_id, **kwargs):  # noqa: E501
        """List release dates for a title  # noqa: E501

        Retrieve the release dates associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_release_dates(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :return: ImdbapiListTitleReleaseDatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_list_title_release_dates_with_http_info(title_id, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_list_title_release_dates_with_http_info(title_id, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_list_title_release_dates_with_http_info(self, title_id, **kwargs):  # noqa: E501
        """List release dates for a title  # noqa: E501

        Retrieve the release dates associated with a specific title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_list_title_release_dates_with_http_info(title_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title_id: Required. IMDb title ID in the format \"tt1234567\". (required)
        :return: ImdbapiListTitleReleaseDatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_list_title_release_dates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_id' is set
        if self.api_client.client_side_validation and ('title_id' not in params or
                                                       params['title_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title_id` when calling `i_mdb_api_service_list_title_release_dates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'title_id' in params:
            path_params['title_id'] = params['title_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/titles/{title_id}/release_dates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiListTitleReleaseDatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def i_mdb_api_service_search_titles(self, query, **kwargs):  # noqa: E501
        """Search titles by query  # noqa: E501

        Search for titles using a query string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_search_titles(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Required. The search query for titles. (required)
        :param int page_size: Optional. The maximum number of titles to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 10.
        :param str page_token: Optional. Token for pagination, if applicable.
        :return: ImdbapiSearchTitlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.i_mdb_api_service_search_titles_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.i_mdb_api_service_search_titles_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def i_mdb_api_service_search_titles_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search titles by query  # noqa: E501

        Search for titles using a query string.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.i_mdb_api_service_search_titles_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Required. The search query for titles. (required)
        :param int page_size: Optional. The maximum number of titles to return per page. If not specified, a default value will be used.  The value must be between 1 and 50. Default is 10.
        :param str page_token: Optional. Token for pagination, if applicable.
        :return: ImdbapiSearchTitlesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method i_mdb_api_service_search_titles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if self.api_client.client_side_validation and ('query' not in params or
                                                       params['query'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query` when calling `i_mdb_api_service_search_titles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/search/titles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImdbapiSearchTitlesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
