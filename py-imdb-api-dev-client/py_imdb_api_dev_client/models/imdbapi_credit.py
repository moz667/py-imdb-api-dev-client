# coding: utf-8

"""
    IMDbAPI

    This is beta version of the IMDb API. It is not yet stable and may change in the future.  # noqa: E501

    OpenAPI spec version: 2.0.2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py_imdb_api_dev_client.configuration import Configuration


class ImdbapiCredit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'ImdbapiTitle',
        'name': 'ImdbapiName',
        'category': 'ImdbapiCreditCategory',
        'characters': 'list[str]',
        'episodes_count': 'int'
    }

    attribute_map = {
        'title': 'title',
        'name': 'name',
        'category': 'category',
        'characters': 'characters',
        'episodes_count': 'episodes_count'
    }

    def __init__(self, title=None, name=None, category=None, characters=None, episodes_count=None, _configuration=None):  # noqa: E501
        """ImdbapiCredit - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._name = None
        self._category = None
        self._characters = None
        self._episodes_count = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if characters is not None:
            self.characters = characters
        if episodes_count is not None:
            self.episodes_count = episodes_count

    @property
    def title(self):
        """Gets the title of this ImdbapiCredit.  # noqa: E501

        The Title which this credit is associated with.  # noqa: E501

        :return: The title of this ImdbapiCredit.  # noqa: E501
        :rtype: ImdbapiTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ImdbapiCredit.

        The Title which this credit is associated with.  # noqa: E501

        :param title: The title of this ImdbapiCredit.  # noqa: E501
        :type: ImdbapiTitle
        """

        self._title = title

    @property
    def name(self):
        """Gets the name of this ImdbapiCredit.  # noqa: E501

        The Name who is credited for this role.  # noqa: E501

        :return: The name of this ImdbapiCredit.  # noqa: E501
        :rtype: ImdbapiName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImdbapiCredit.

        The Name who is credited for this role.  # noqa: E501

        :param name: The name of this ImdbapiCredit.  # noqa: E501
        :type: ImdbapiName
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this ImdbapiCredit.  # noqa: E501

        The category of the credit, such as \"Actor\", \"Director\", etc.  # noqa: E501

        :return: The category of this ImdbapiCredit.  # noqa: E501
        :rtype: ImdbapiCreditCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ImdbapiCredit.

        The category of the credit, such as \"Actor\", \"Director\", etc.  # noqa: E501

        :param category: The category of this ImdbapiCredit.  # noqa: E501
        :type: ImdbapiCreditCategory
        """

        self._category = category

    @property
    def characters(self):
        """Gets the characters of this ImdbapiCredit.  # noqa: E501

        The characters played by the actor/actress in the title.  # noqa: E501

        :return: The characters of this ImdbapiCredit.  # noqa: E501
        :rtype: list[str]
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this ImdbapiCredit.

        The characters played by the actor/actress in the title.  # noqa: E501

        :param characters: The characters of this ImdbapiCredit.  # noqa: E501
        :type: list[str]
        """

        self._characters = characters

    @property
    def episodes_count(self):
        """Gets the episodes_count of this ImdbapiCredit.  # noqa: E501

        The number of episodes in which the person has appeared.  # noqa: E501

        :return: The episodes_count of this ImdbapiCredit.  # noqa: E501
        :rtype: int
        """
        return self._episodes_count

    @episodes_count.setter
    def episodes_count(self, episodes_count):
        """Sets the episodes_count of this ImdbapiCredit.

        The number of episodes in which the person has appeared.  # noqa: E501

        :param episodes_count: The episodes_count of this ImdbapiCredit.  # noqa: E501
        :type: int
        """

        self._episodes_count = episodes_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImdbapiCredit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImdbapiCredit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImdbapiCredit):
            return True

        return self.to_dict() != other.to_dict()
