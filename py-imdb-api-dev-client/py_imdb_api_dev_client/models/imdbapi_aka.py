# coding: utf-8

"""
    IMDbAPI

    This is beta version of the IMDb API. It is not yet stable and may change in the future.  # noqa: E501

    OpenAPI spec version: 2.0.2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py_imdb_api_dev_client.configuration import Configuration


class ImdbapiAKA(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'language_code': 'str',
        'text': 'str',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'country_code': 'country_code',
        'language_code': 'language_code',
        'text': 'text',
        'attributes': 'attributes'
    }

    def __init__(self, country_code=None, language_code=None, text=None, attributes=None, _configuration=None):  # noqa: E501
        """ImdbapiAKA - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country_code = None
        self._language_code = None
        self._text = None
        self._attributes = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if language_code is not None:
            self.language_code = language_code
        if text is not None:
            self.text = text
        if attributes is not None:
            self.attributes = attributes

    @property
    def country_code(self):
        """Gets the country_code of this ImdbapiAKA.  # noqa: E501


        :return: The country_code of this ImdbapiAKA.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ImdbapiAKA.


        :param country_code: The country_code of this ImdbapiAKA.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def language_code(self):
        """Gets the language_code of this ImdbapiAKA.  # noqa: E501


        :return: The language_code of this ImdbapiAKA.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this ImdbapiAKA.


        :param language_code: The language_code of this ImdbapiAKA.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def text(self):
        """Gets the text of this ImdbapiAKA.  # noqa: E501

        The display text of the title in the specified language and country.  # noqa: E501

        :return: The text of this ImdbapiAKA.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ImdbapiAKA.

        The display text of the title in the specified language and country.  # noqa: E501

        :param text: The text of this ImdbapiAKA.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def attributes(self):
        """Gets the attributes of this ImdbapiAKA.  # noqa: E501

        Additional attributes related to the title, such as \"original title\", \"working title\", or \"alternative title\".  # noqa: E501

        :return: The attributes of this ImdbapiAKA.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ImdbapiAKA.

        Additional attributes related to the title, such as \"original title\", \"working title\", or \"alternative title\".  # noqa: E501

        :param attributes: The attributes of this ImdbapiAKA.  # noqa: E501
        :type: list[str]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImdbapiAKA, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImdbapiAKA):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImdbapiAKA):
            return True

        return self.to_dict() != other.to_dict()
