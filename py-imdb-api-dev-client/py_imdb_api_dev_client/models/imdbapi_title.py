# coding: utf-8

"""
    IMDbAPI

    This is beta version of the IMDb API. It is not yet stable and may change in the future.  # noqa: E501

    OpenAPI spec version: 2.0.2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py_imdb_api_dev_client.configuration import Configuration


class ImdbapiTitle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'primary_title': 'str',
        'original_title': 'str',
        'primary_image': 'ImdbapiImage',
        'genres': 'list[str]',
        'rating': 'ImdbapiRating',
        'start_year': 'int',
        'end_year': 'int',
        'runtime_minutes': 'int',
        'plot': 'str',
        'is_adult': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'primary_title': 'primary_title',
        'original_title': 'original_title',
        'primary_image': 'primary_image',
        'genres': 'genres',
        'rating': 'rating',
        'start_year': 'start_year',
        'end_year': 'end_year',
        'runtime_minutes': 'runtime_minutes',
        'plot': 'plot',
        'is_adult': 'is_adult'
    }

    def __init__(self, id=None, type=None, primary_title=None, original_title=None, primary_image=None, genres=None, rating=None, start_year=None, end_year=None, runtime_minutes=None, plot=None, is_adult=None, _configuration=None):  # noqa: E501
        """ImdbapiTitle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._primary_title = None
        self._original_title = None
        self._primary_image = None
        self._genres = None
        self._rating = None
        self._start_year = None
        self._end_year = None
        self._runtime_minutes = None
        self._plot = None
        self._is_adult = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if primary_title is not None:
            self.primary_title = primary_title
        if original_title is not None:
            self.original_title = original_title
        if primary_image is not None:
            self.primary_image = primary_image
        if genres is not None:
            self.genres = genres
        if rating is not None:
            self.rating = rating
        if start_year is not None:
            self.start_year = start_year
        if end_year is not None:
            self.end_year = end_year
        if runtime_minutes is not None:
            self.runtime_minutes = runtime_minutes
        if plot is not None:
            self.plot = plot
        if is_adult is not None:
            self.is_adult = is_adult

    @property
    def id(self):
        """Gets the id of this ImdbapiTitle.  # noqa: E501

        The unique identifier for the title.  # noqa: E501

        :return: The id of this ImdbapiTitle.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImdbapiTitle.

        The unique identifier for the title.  # noqa: E501

        :param id: The id of this ImdbapiTitle.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImdbapiTitle.  # noqa: E501

        The type of the title, such as \"movie\", \"tvSeries\", \"tvEpisode\", etc.  # noqa: E501

        :return: The type of this ImdbapiTitle.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImdbapiTitle.

        The type of the title, such as \"movie\", \"tvSeries\", \"tvEpisode\", etc.  # noqa: E501

        :param type: The type of this ImdbapiTitle.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def primary_title(self):
        """Gets the primary_title of this ImdbapiTitle.  # noqa: E501

        The primary title of the title, which is typically the most recognized name.  # noqa: E501

        :return: The primary_title of this ImdbapiTitle.  # noqa: E501
        :rtype: str
        """
        return self._primary_title

    @primary_title.setter
    def primary_title(self, primary_title):
        """Sets the primary_title of this ImdbapiTitle.

        The primary title of the title, which is typically the most recognized name.  # noqa: E501

        :param primary_title: The primary_title of this ImdbapiTitle.  # noqa: E501
        :type: str
        """

        self._primary_title = primary_title

    @property
    def original_title(self):
        """Gets the original_title of this ImdbapiTitle.  # noqa: E501

        The original title of the title, normally which is the title as it was originally released.  # noqa: E501

        :return: The original_title of this ImdbapiTitle.  # noqa: E501
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this ImdbapiTitle.

        The original title of the title, normally which is the title as it was originally released.  # noqa: E501

        :param original_title: The original_title of this ImdbapiTitle.  # noqa: E501
        :type: str
        """

        self._original_title = original_title

    @property
    def primary_image(self):
        """Gets the primary_image of this ImdbapiTitle.  # noqa: E501

        The primary image associated with the title, such as a poster.  # noqa: E501

        :return: The primary_image of this ImdbapiTitle.  # noqa: E501
        :rtype: ImdbapiImage
        """
        return self._primary_image

    @primary_image.setter
    def primary_image(self, primary_image):
        """Sets the primary_image of this ImdbapiTitle.

        The primary image associated with the title, such as a poster.  # noqa: E501

        :param primary_image: The primary_image of this ImdbapiTitle.  # noqa: E501
        :type: ImdbapiImage
        """

        self._primary_image = primary_image

    @property
    def genres(self):
        """Gets the genres of this ImdbapiTitle.  # noqa: E501

        The genres field contains a list of genres associated with the title.  # noqa: E501

        :return: The genres of this ImdbapiTitle.  # noqa: E501
        :rtype: list[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this ImdbapiTitle.

        The genres field contains a list of genres associated with the title.  # noqa: E501

        :param genres: The genres of this ImdbapiTitle.  # noqa: E501
        :type: list[str]
        """

        self._genres = genres

    @property
    def rating(self):
        """Gets the rating of this ImdbapiTitle.  # noqa: E501

        The rating field contains the aggregate rating and the number of votes for the title.  # noqa: E501

        :return: The rating of this ImdbapiTitle.  # noqa: E501
        :rtype: ImdbapiRating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ImdbapiTitle.

        The rating field contains the aggregate rating and the number of votes for the title.  # noqa: E501

        :param rating: The rating of this ImdbapiTitle.  # noqa: E501
        :type: ImdbapiRating
        """

        self._rating = rating

    @property
    def start_year(self):
        """Gets the start_year of this ImdbapiTitle.  # noqa: E501

        The start_year field is used for titles that have a defined start, such as movies or TV series.  # noqa: E501

        :return: The start_year of this ImdbapiTitle.  # noqa: E501
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this ImdbapiTitle.

        The start_year field is used for titles that have a defined start, such as movies or TV series.  # noqa: E501

        :param start_year: The start_year of this ImdbapiTitle.  # noqa: E501
        :type: int
        """

        self._start_year = start_year

    @property
    def end_year(self):
        """Gets the end_year of this ImdbapiTitle.  # noqa: E501

        The end_year field is used for titles that have a defined end, such as TV series.  # noqa: E501

        :return: The end_year of this ImdbapiTitle.  # noqa: E501
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year):
        """Sets the end_year of this ImdbapiTitle.

        The end_year field is used for titles that have a defined end, such as TV series.  # noqa: E501

        :param end_year: The end_year of this ImdbapiTitle.  # noqa: E501
        :type: int
        """

        self._end_year = end_year

    @property
    def runtime_minutes(self):
        """Gets the runtime_minutes of this ImdbapiTitle.  # noqa: E501

        The runtime_minutes field contains the total runtime of the title in minutes.  # noqa: E501

        :return: The runtime_minutes of this ImdbapiTitle.  # noqa: E501
        :rtype: int
        """
        return self._runtime_minutes

    @runtime_minutes.setter
    def runtime_minutes(self, runtime_minutes):
        """Sets the runtime_minutes of this ImdbapiTitle.

        The runtime_minutes field contains the total runtime of the title in minutes.  # noqa: E501

        :param runtime_minutes: The runtime_minutes of this ImdbapiTitle.  # noqa: E501
        :type: int
        """

        self._runtime_minutes = runtime_minutes

    @property
    def plot(self):
        """Gets the plot of this ImdbapiTitle.  # noqa: E501

        The plot field contains a brief summary or description of the title's storyline.  # noqa: E501

        :return: The plot of this ImdbapiTitle.  # noqa: E501
        :rtype: str
        """
        return self._plot

    @plot.setter
    def plot(self, plot):
        """Sets the plot of this ImdbapiTitle.

        The plot field contains a brief summary or description of the title's storyline.  # noqa: E501

        :param plot: The plot of this ImdbapiTitle.  # noqa: E501
        :type: str
        """

        self._plot = plot

    @property
    def is_adult(self):
        """Gets the is_adult of this ImdbapiTitle.  # noqa: E501

        The is_adult field indicates whether the title is intended for adult audiences.  # noqa: E501

        :return: The is_adult of this ImdbapiTitle.  # noqa: E501
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this ImdbapiTitle.

        The is_adult field indicates whether the title is intended for adult audiences.  # noqa: E501

        :param is_adult: The is_adult of this ImdbapiTitle.  # noqa: E501
        :type: bool
        """

        self._is_adult = is_adult

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImdbapiTitle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImdbapiTitle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImdbapiTitle):
            return True

        return self.to_dict() != other.to_dict()
