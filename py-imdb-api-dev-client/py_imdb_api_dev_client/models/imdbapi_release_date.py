# coding: utf-8

"""
    IMDbAPI

    This is beta version of the IMDb API. It is not yet stable and may change in the future.  # noqa: E501

    OpenAPI spec version: 2.0.2-beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from py_imdb_api_dev_client.configuration import Configuration


class ImdbapiReleaseDate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'release_date': 'ImdbapiDate',
        'attributes': 'list[str]'
    }

    attribute_map = {
        'country_code': 'country_code',
        'release_date': 'release_date',
        'attributes': 'attributes'
    }

    def __init__(self, country_code=None, release_date=None, attributes=None, _configuration=None):  # noqa: E501
        """ImdbapiReleaseDate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country_code = None
        self._release_date = None
        self._attributes = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if release_date is not None:
            self.release_date = release_date
        if attributes is not None:
            self.attributes = attributes

    @property
    def country_code(self):
        """Gets the country_code of this ImdbapiReleaseDate.  # noqa: E501


        :return: The country_code of this ImdbapiReleaseDate.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ImdbapiReleaseDate.


        :param country_code: The country_code of this ImdbapiReleaseDate.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def release_date(self):
        """Gets the release_date of this ImdbapiReleaseDate.  # noqa: E501

        The release_date field contains the date when the title was released in the specified country.  # noqa: E501

        :return: The release_date of this ImdbapiReleaseDate.  # noqa: E501
        :rtype: ImdbapiDate
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ImdbapiReleaseDate.

        The release_date field contains the date when the title was released in the specified country.  # noqa: E501

        :param release_date: The release_date of this ImdbapiReleaseDate.  # noqa: E501
        :type: ImdbapiDate
        """

        self._release_date = release_date

    @property
    def attributes(self):
        """Gets the attributes of this ImdbapiReleaseDate.  # noqa: E501

        The attributes field contains additional attributes related to the release date.  These attributes can include information such as the format of the release (e.g., \"Theatrical\", \"DVD\", \"Blu-ray\").  # noqa: E501

        :return: The attributes of this ImdbapiReleaseDate.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ImdbapiReleaseDate.

        The attributes field contains additional attributes related to the release date.  These attributes can include information such as the format of the release (e.g., \"Theatrical\", \"DVD\", \"Blu-ray\").  # noqa: E501

        :param attributes: The attributes of this ImdbapiReleaseDate.  # noqa: E501
        :type: list[str]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImdbapiReleaseDate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImdbapiReleaseDate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImdbapiReleaseDate):
            return True

        return self.to_dict() != other.to_dict()
